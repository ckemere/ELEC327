; --COPYRIGHT--,BSD_EX
;  Copyright (c) 2014, Texas Instruments Incorporated
;  All rights reserved.
; 
;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions
;  are met:
; 
;  *  Redistributions of source code must retain the above copyright
;     notice, this list of conditions and the following disclaimer.
; 
;  *  Redistributions in binary form must reproduce the above copyright
;     notice, this list of conditions and the following disclaimer in the
;     documentation and/or other materials provided with the distribution.
; 
;  *  Neither the name of Texas Instruments Incorporated nor the names of
;     its contributors may be used to endorse or promote products derived
;     from this software without specific prior written permission.
; 
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
;  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
;  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
;  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
;  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
;  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
;  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
; 
; ******************************************************************************
;  
;                        MSP430 CODE EXAMPLE DISCLAIMER
; 
;  MSP430 code examples are self-contained low-level programs that typically
;  demonstrate a single peripheral function or device feature in a highly
;  concise manner. For this the code may rely on the device's power-on default
;  register values and settings such as the clock configuration and care must
;  be taken when combining code from several examples to avoid potential side
;  effects. Also see www.ti.com/grace for a GUI- and www.ti.com/msp430ware
;  for an API functional library-approach to peripheral configuration.
; 
; --/COPYRIGHT--
;*******************************************************************************
;  MSP430FR24xx Demo - Timer1_A3, PWM TA1.1-2, Up Mode, 32KHz ACLK
;
;  Description: This program generates two PWM outputs on P1.4,P1.5 using
;  Timer1_A configured for up mode. The value in CCR0, 100-1, defines the PWM
;  period and the values in CCR1 and CCR2 the PWM duty cycles. Using 32768Hz
;  ACLK as TACLK, the timer period is ~3ms with a 75% duty cycle on P1.5
;  and 25% on P1.4.
;  ACLK = TACLK =32768Hz, SMCLK = MCLK = DCO
;
;
;           MSP430FR2433
;         ---------------
;     /|\|            XIN|-
;      | |               |   32.768kHz
;      --|RST        XOUT|-
;        |               |
;        |     P1.5/TA1.1|--> CCR1 - 75% PWM
;        |     P1.4/TA1.2|--> CCR2 - 25% PWM
;
;
;  Ling Zhu
;  Texas Instruments Inc.
;  July 2015
;  Built with IAR Embedded Workbench v6.10
;******************************************************************************
#include <msp430.h>
;-------------------------------------------------------------------------------
            RSEG    CSTACK                                  ; Define stack segment
;-------------------------------------------------------------------------------
            RSEG    CODE
;-------------------------------------------------------------------------------
RESET       mov.w   #SFE(CSTACK),SP                         ; Initialize stackpointer
StopWDT     mov.w   #WDTPW|WDTHOLD,&WDTCTL                  ; Stop WDT
                
            bis.b   #BIT4+BIT5,&P1DIR                       ; P1.4 and P1.5 output
            bis.b   #BIT4+BIT5,&P1SEL1                      ; P1.4 and P1.5 options select
            bic.w   #LOCKLPM5,&PM5CTL0                      ; Unlock I/O pin

XT1on       bis.b   #BIT0+BIT1,&P2SEL0                      ; set XT1 pin as second function
XT1chk      bic.w   #XT1OFFG+DCOFFG,&CSCTL7                 ; Clear XT1,DCO fault flags
            bic.w   #OFIFG,&SFRIFG1                         ; Clear fault flags
            bit.w   #OFIFG,&SFRIFG1                         ; Test oscilator fault flag
            jnz     XT1chk                                  ; If set, attempt to clear again
                                                            ; If clear, continue

            bis.w   #SCG0,SR                                ; Disable FLL
            bis.w   #SELREF__REFOCLK,&CSCTL3                ; Set REFOCLK as FLL reference source
            mov.w   #0,&CSCTL0                              ; clear DCO and MOD registers
            bic.w   #DCORSEL_7,&CSCTL1                      ; Clear DCO frequency select bits first
            bis.w   #DCORSEL_3,&CSCTL1                      ; Set DCOCLK = 8MHz
            mov.w   #FLLD_1+121,&CSCTL2                     ; FLLD = 1, by default, DCODIV = DCO/2 = 4MHz
            nop
            nop
            nop
            bic.w   #SCG0,SR                                ; Enable FLL
Unlock      mov.w   &CSCTL7,R13
            and.w   #FLLUNLOCK0|FLLUNLOCK1,R13
            jnz     Unlock                                  ; Check if FLL is locked

            bis.w   #SELMS__DCOCLKDIV|SELA__XT1CLK,&CSCTL4  ; set ACLK = XT1CLK = 32768Hz, DCOCLK as MCLK and SMCLK source
            bis.w   #DIVM0|DIVS0,&CSCTL5                    ; SMCLK = MCLK = DCODIV = 4MHz

            mov.w   #100-1,&TA1CCR0                         ; PWM period
            mov.w   #OUTMOD_7,&TA1CCTL1                     ; CCR1 reset/set
            mov.w   #75,&TA1CCR1                            ; CCR1 PWM duty cycle
            mov.w   #OUTMOD_7,&TA1CCTL2                     ; CCR2 reset/set
            mov.w   #25,&TA1CCR2                            ; CCR2 PWM duty cycle
            mov.w   #TASSEL_1|MC_1|TACLR,&TA1CTL            ; ACLK, up mode, clear TAR

Mainloop    bis.w   #LPM3,SR                                ; Enter LPM3
            nop                                             ; For debuger
 
;-------------------------------------------------------------------------------
            COMMON  INTVEC                                  ; Interrupt Vectors
;-------------------------------------------------------------------------------
            ORG     RESET_VECTOR                            ; POR, ext. Reset
            DW      RESET
            END
